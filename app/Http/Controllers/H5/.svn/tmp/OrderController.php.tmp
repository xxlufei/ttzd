<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017-10-30
 * Time: 19:24
 */

namespace App\Http\Controllers\H5;


use App\Core\Dao\Front\OrderDetail;
use App\Core\Dao\Front\Orders;
use App\Core\Enum\ErroeCodeEnum;
use App\Core\Enum\EstateEnum;
use App\Core\Enum\ExisitEnum;
use App\Core\Enum\OrderStateEnum;
use App\Http\Controllers\Controller;
use config\EnvSetting;
use Illuminate\Http\Request;
use App\Core\Dao\Front\Category;
use App\Core\Dao\Front\Goods;
use Illuminate\Support\Facades\DB;

class OrderController extends Controller
{
    public function goodsList(Request $request)
    {
        if (empty($request['m'])) {
            exit('请扫码打开本页面');
        }
        $user = $request['user'];
        $userId = $user['id'];
        $order = Orders::getINGOrderByUserId($userId);
        if (!empty($order)) {
            return redirect("/order_book?orderId={$order->id}&orderNo={$order->orderno}");
        }
        $categorys = Category::getAllCategoryByMachineId($request['m']);
        $goods = Goods::getAllGoodsByMachineId($request['m']);
        $firstCategoryId = $goods[0]->categoryid;
        return view('h5.list', ['goods' => $goods, 'categorys' => $categorys, 'firstCategoryId' => $firstCategoryId]);
    }

    public function orderSubmit(Request $request)
    {
        $order = Orders::getINGOrderByUserId(1);
        if (!empty($order)) {
            return response()->json(ErroeCodeEnum::ORDERINGERROR)->setCallback($request['jsonp']);
        }
        $params = json_decode($request['params'], true);
        if (empty($params))
            return $this->sendResponseErr(ErroeCodeEnum::ERROR, '参数错误');
        $user = $request['user'];
        $userId = $user['id'];
        $payPrice = 0;
        $ids = array_column($params, 'id');
        $nums = array_column($params, 'num');
        $buyArr = array_combine($ids, $nums);
        $fp = fopen('lock/orderlock', 'r');
        flock($fp, LOCK_EX);
        $goods = Goods::whereIn('id', $ids)->get();
        if (empty($goods)) {
            echo "<script>alert('订单信息错误,请重新扫码进入');</script>";
            return;
        }
        $priceArr = array();
        $nameArr = array();
        foreach ($goods as $obj) {
            $num = $buyArr[$obj->id];
            if ($obj->stock < $num)
                return response()->json(ErroeCodeEnum::ERROR)->setCallback($request['jsonp']);
            //return $this->sendResponseErr(ErroeCodeEnum::ERROR, '抱歉!库存不足，工作人员会尽快补充');
            $obj->stock -= $num;
            $priceArr[$obj->id] = $obj->isdiscount == ExisitEnum::YES ? $obj->discountprice : $obj->price;
            $payPrice += $priceArr[$obj->id] * $num;
            $nameArr[$obj->id] = $obj->name;
        }
        foreach ($goods as $obj) {
            $mId = $obj->machineid;
            $obj->save();
        }
        if (empty($mId)) {
            return response()->json(ErroeCodeEnum::ORDERINFOERROR)->setCallback($request['jsonp']);
        }
        $res = Orders::createBiz1($userId, $payPrice, $buyArr, $priceArr, $nameArr, $mId);
        flock($fp, LOCK_UN);
        fclose($fp);
        return response()->json(['status' => 200, 'content' => $res])->setCallback($request['jsonp']);
    }

    public function book(Request $request)
    {
        $user = $request['user'];
        $userId = $user['id'];
        $orderId = $request['orderId'];
        $orderNo = $request['orderNo'];
        $order = Orders::getOrderByIdAndOrderNoAndUserId($orderId, $orderNo, $userId);
        if (empty($order)) {
            echo "<script>alert('订单信息错误,请重新扫码进入');</script>";
            return;
        }
        $detail = OrderDetail::getOrderDetailByOrderId($orderId)->toArray();
        $goods = array();
        foreach ($detail as $de) {
            $goods[] = ['name' => $de['goodsname'], 'num' => $de['num'], 'price' => $de['goodsprice'] * $de['num'] / 100];
        }

        return view('h5.book', ['goods' => $goods, 'totalPrice' => $order->payprice/100, 'orderId' => $orderId, 'orderNo' => $orderNo, 'm' => $order->machineid]);
    }

    public function orderPay(Request $request)
    {
        $options = [
            // 前面的appid什么的也得保留哦
            'app_id' => 'xxxx',
            // ...
            // payment
            'payment' => [
                'merchant_id'        => 'your-mch-id',
                'key'                => 'key-for-signature',
                'cert_path'          => 'path/to/your/cert.pem', // XXX: 绝对路径！！！！
                'key_path'           => 'path/to/your/key',      // XXX: 绝对路径！！！！
                'notify_url'         => '默认的订单回调地址',       // 你也可以在下单时单独设置来想覆盖它
                // 'device_info'     => '013467007045764',
                // 'sub_app_id'      => '',
                // 'sub_merchant_id' => '',
                // ...
            ],
        ];
        $app = new Application($options);
        $payment = $app->payment;
    }

    public function orderCancel(Request $request)
    {
        $user = $request['user'];
        $userId = $user['id'];
        $orderId = $request['orderId'];
        $order = Orders::getOrderByOrderIdAndUserId($orderId, $userId);
        if (empty($order))
            return response()->json(['status' => 4000, 'msg' => '订单信息错误,请重新扫码进入'])->setCallback($request['jsonp']);
        //恢复库存

        $detail = OrderDetail::getOrderDetailByOrderId($orderId);
        foreach($detail as $de) {
            Goods::revertStock($de);
        }
        $order->estate = EstateEnum::DELETED;
        $order->save();
        return response()->json(['status' => 200, 'msg' => '订单取消成功'])->setCallback($request['jsonp']);
    }

    public function notify(Request $request)
    {

    }

    private function orderCheck($userId)
    {

    }
}
